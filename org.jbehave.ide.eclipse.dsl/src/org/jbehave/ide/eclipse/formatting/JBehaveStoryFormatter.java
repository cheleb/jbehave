/*
 * generated by Xtext
 */
package org.jbehave.ide.eclipse.formatting;

import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.jbehave.ide.eclipse.services.JBehaveStoryGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an
 * example
 */
public class JBehaveStoryFormatter extends AbstractDeclarativeFormatter {

	

	@Override
	protected void configureFormatting(FormattingConfig config) {
		
		JBehaveStoryGrammarAccess jbehaveGrammar = (JBehaveStoryGrammarAccess) getGrammarAccess();
		
		indent(config, jbehaveGrammar, jbehaveGrammar.getStepStartingWordRule());
		indent(config, jbehaveGrammar, jbehaveGrammar.getAsARule());
		indent(config, jbehaveGrammar, jbehaveGrammar.getIWantToRule());
		indent(config, jbehaveGrammar, jbehaveGrammar.getInOrderToRule());
		
//		config.setIndentationDecrement().range(jbehaveGrammar.getNarrativeRule(),jbehaveGrammar.getScenarioRule());
//		config.setIndentationIncrement().range(jbehaveGrammar.getScenarioRule(), jbehaveGrammar.getScenarioRule());
//		config.setIndentationDecrement().before(jbehaveGrammar.getScenarioRule());
		
		
		beforeAndAfter(config,jbehaveGrammar.getGivenStoriesRule(),
				jbehaveGrammar.getIWantToRule(), jbehaveGrammar.getAsARule());
		config.setLinewrap(2).after(jbehaveGrammar.getMainDescriptionRule());
		config.setLinewrap(1).before(jbehaveGrammar.getAsARule());
		config.setLinewrap(1).before(jbehaveGrammar.getInOrderToRule());
		config.setLinewrap(1).before(jbehaveGrammar.getIWantToRule());
		config.setLinewrap(1).before(jbehaveGrammar.getAsARule());
		config.setLinewrap(2).before(jbehaveGrammar.getScenarioRule());
		config.setLinewrap(2).after(jbehaveGrammar.getScenarioRule());
		config.setLinewrap(1).before(jbehaveGrammar.getStepStartingWordRule());
		
		// It's usually a good idea to activate the following three statements.
		// They will add and preserve newlines around comments
		// c.setLinewrap(0, 1,
		// 2).before(getGrammarAccess().getSL_COMMENTRule());
		// c.setLinewrap(0, 1,
		// 2).before(getGrammarAccess().getML_COMMENTRule());
		// c.setLinewrap(0, 1, 1).after(getGrammarAccess().getML_COMMENTRule());

	}

	private void indent(FormattingConfig config,
			JBehaveStoryGrammarAccess jbehaveGrammar, ParserRule parserRule) {
		config.setIndentationIncrement().before(parserRule);
		config.setIndentationDecrement().after(parserRule);
	}

	private JBehaveStoryFormatter beforeAndAfter(FormattingConfig config, ParserRule... parserRules) {
		for (ParserRule parserRule : parserRules) {
			//config.setLinewrap(0, 1, 2).before(parserRule);
		}
		return this;
	}
}
